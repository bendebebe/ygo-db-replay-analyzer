datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  username       String         @unique
  hashedPassword String // Added for auth
  sessions       Session[]
  decks          Deck[]
  replays        Replay[]
  refreshTokens  RefreshToken[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
}

model Session {
  id          String    @id @default(uuid())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  replays     Replay[]
  isPublic    Boolean   @default(false)
  shareableId String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Player {
  id         String      @id @default(cuid())
  playerId   String      @unique // From duelingbook
  dbName     String      @unique // duelingbook username
  replays1   Replay[]    @relation("Player1")
  replays2   Replay[]    @relation("Player2")
  wonReplays Replay[]    @relation("Winner")
  rpsChoices RpsChoice[]
  decks      Deck[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?

  @@index([dbName])
  @@index([playerId])
}

model Replay {
  id             String      @id @default(cuid())
  replayUrl      String      @unique
  sessionId      String
  player1Id      String
  player2Id      String
  winnerPlayerId String?
  session        Session     @relation(fields: [sessionId], references: [id])
  player1        Player      @relation("Player1", fields: [player1Id], references: [id])
  player2        Player      @relation("Player2", fields: [player2Id], references: [id])
  winner         Player?     @relation("Winner", fields: [winnerPlayerId], references: [id])
  decks          Deck[]
  rpsChoices     RpsChoice[]
  dbCreatedAt    DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deletedAt      DateTime?
  user           User?       @relation(fields: [userId], references: [id])
  userId         String?

  @@index([sessionId])
  @@index([player1Id])
  @@index([player2Id])
  @@index([winnerPlayerId])
  @@index([userId])
}

model Deck {
  id         String       @id @default(cuid())
  name       String
  gameNumber Int          @default(1)
  replayId   String
  replay     Replay       @relation(fields: [replayId], references: [id])
  playerId   String
  player     Player       @relation(fields: [playerId], references: [id])
  cards      DeckToCard[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  user       User?        @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([replayId, gameNumber, playerId])
  @@index([replayId])
  @@index([userId])
  @@index([playerId])
}

model DeckToCard {
  id           String    @id @default(cuid())
  deckId       String
  cardId       String
  copiesOfCard Int
  deck         Deck      @relation(fields: [deckId], references: [id])
  card         Card      @relation(fields: [cardId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@unique([deckId, cardId])
  @@index([deckId])
  @@index([cardId])
}

model Card {
  id           String       @id @default(cuid())
  name         String
  imageUrl     String
  serialNumber String       @unique
  decks        DeckToCard[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model RpsChoice {
  id        String    @id @default(cuid())
  playerId  String
  replayId  String
  choice    String // rock/paper/scissors
  won       Boolean
  player    Player    @relation(fields: [playerId], references: [id])
  replay    Replay    @relation(fields: [replayId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([playerId])
  @@index([replayId])
}
