version: '3.8'

services:
  frontend:
    platform: linux/amd64
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
    env_file:
      - ./env/development/frontend.env
    command: npm run dev
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
    ports:
      - "4000:4000"
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://dbuser:dbpass@db:5432/duelingbook?schema=public
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app-network
    env_file:
      - ./env/development/backend.env
    command: npm run dev

  db:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=dbpass
      - POSTGRES_DB=duelingbook
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbuser"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - app-network

  worker:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
    environment:
      - DATABASE_URL=postgresql://dbuser:dbpass@db:5432/duelingbook?schema=public
      - NODE_ENV=worker
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
      - db
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app-network
    env_file:
      - ./env/development/backend.env
    command: npm run start:worker
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: 
  redis_data: